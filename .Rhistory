## Computing the inverse of a matrix can be computationally heavy, especially for big matrices.
## If we have to compute the inverse of a matrix several times,
## it is better to cache the result in the first run and reuse it later.
## This is achieves by the functions 'makeCacheMatrix' and 'cacheInverse'.
## The following function creates a list containing four functions:
## set the value of the matrix
## get the value of the matrix
## set the inverse of the matrix
## get the inverse of the matrix
## Once you have processed a matrix by 'makeCacheMatrix' you can call cacheInverse on the returned "matrix" object.
makeCacheMatrix <- function(x = numeric()) {
m <- NULL
## definition of four function
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setInverse <- function(solve) m <<- solve
getInverse <- function() m
## return
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
## The following function checks whether the inverse of the matrix has been computed before.
## If no, the inverse of the matrix is computed and cached (by calling setInverse).
## If yes, a message is printed and the cached value is returned.
cacheSolve <- function(x, ...) {
m <- x$getInverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- round(solve(data, ...),10) ##rounding to 10 digits to avoid numerical imprecision
x$setInverse(m)
m
}
mat=matrix(c(3,1,-3,2,1,-2,6,3,-5),nrow=3)
mat2=makeCacheMatrix(mat)
cacheSolve(mat2)
